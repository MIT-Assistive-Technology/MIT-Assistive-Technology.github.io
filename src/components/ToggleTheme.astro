---
import SunIcon from '@/components/icons/SunIcon'
import MoonIcon from '@/components/icons/MoonIcon'
---

<script>
	class themeToggle extends HTMLElement {
		constructor() {
			super()
			const button = this.querySelector('button') as HTMLButtonElement

			if (button) {
				button.addEventListener('click', (e) => {
					if (e.currentTarget instanceof HTMLButtonElement) {
						let isPressed = e.currentTarget.getAttribute('aria-pressed') === 'true'
						let themeChangeEvent = new CustomEvent('theme-change', {
							detail: {
								theme: isPressed ? 'light' : 'dark'
							}
						})
						// dispatch event -> ThemeProvider.astro
						document.dispatchEvent(themeChangeEvent)
						// Update button state immediately
						button.setAttribute('aria-pressed', String(!isPressed))
					}
				})
			}
		}

		connectedCallback() {
			// Ensure button state is correct when component is connected
			const button = this.querySelector('button') as HTMLButtonElement
			if (button) {
				const bodyThemeIsDark = document.documentElement.classList.contains('dark')
				button.setAttribute('aria-pressed', String(bodyThemeIsDark))
			}
		}
	}

	if ('customElements' in window) {
		customElements.define('theme-toggle', themeToggle)
	}
</script>

<theme-toggle class='relative h-6 w-6'>
	<button id='toggle-theme' class='group' aria-label='Toggle Theme'>
		<span class='absolute left-0 right-0 top-0 opacity-0 group-aria-pressed:opacity-100'>
			<SunIcon />
		</span>

		<span class='absolute left-0 right-0 top-0 opacity-0 group-aria-[pressed=false]:opacity-100'>
			<MoonIcon />
		</span>
	</button>
</theme-toggle>

<script is:inline>
	const button = document.getElementById('toggle-theme')

	function setButtonPressed() {
		if (button) {
			const bodyThemeIsDark = document.documentElement.classList.contains('dark')
			button.setAttribute('aria-pressed', String(bodyThemeIsDark))
		}
	}

	// Set initial state
	setButtonPressed()

	// Update button state when theme changes
	document.addEventListener('theme-change', setButtonPressed)

	// Update button state after page transitions
	document.addEventListener('astro:after-swap', setButtonPressed)

	// Update button state when DOM is ready
	document.addEventListener('DOMContentLoaded', setButtonPressed)

	// Watch for class changes on the document element
	if (window.MutationObserver) {
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
					setButtonPressed()
				}
			})
		})

		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['class']
		})
	}
</script>
